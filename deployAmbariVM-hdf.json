{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clientID": {
      "type": "string",
      "metadata": {
        "description": "Prefix for the Environment (2-5 characters) related to the Client ID or Name."
      }
    },
    "primaryAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Primary Address prefix."
      }
    },
    "subnetPrefix": {
      "type": "string",
      "metadata": {
        "description": "Subnet Prefix."
      }
    },
    "ambariServerNicIPAddress": {
      "type": "string",
      "metadata": {
        "description": "The Primary IP address of the new Ambari Server being deployed."
      }
    },
    "ambariServerStorageType": {
      "type": "string",
      "metadata": {
        "Description": "The Type of Redundant Storage used for the Ambari Server being deployed."
      }
    },
    "ambariServerAdminUsername": {
      "type": "string",
      "metadata": {
        "Description": "The Local Username of the account being created on the Ambari Server."
      }
    },
    "ambariServerAdminPassword": {
      "type": "securestring",
      "metadata": {
        "Description": "The Local Password of the account being created on the Ambari Server."
      }
    },
    "ambariServerImagePublisher": {
      "type": "string",
      "metadata": {
        "description": "The Publisher of the Linux Image being used for the Ambari Server."
      }
    },
    "ambariServerImageOffer": {
      "type": "string",
      "metadata": {
        "description": "The Linux Image Offer used for the Ambari Server."
      }
    },
    "ambariServerImageSku": {
      "type": "string",
      "metadata": {
        "description": "The Linux Image SKU used for the Ambari Server."
      }
    },
    "ambariServerImageVersion": {
      "type": "string",
      "metadata": {
        "description": "The Version Number of the fully patched Linux Image being deployed."
      }
    },
    "ambariServerDataDiskSize": {
      "type": "int",
      "metadata": {
        "description": "The Size of the Ambari Server Instance Data Disk in GB."
      }
    },
    "ambariServerVMSize": {
      "type": "string",
      "metadata": {
        "description": "The Size of the Ambari Server VM being deployed in Azure."
      }
    },
    "apiVersion": {
      "type": "string",
      "metadata": {
        "description": "The Azure Resource Manager API Version to use during the Deployment."
      }
    },


    "vNetName": {
      "type": "string",
      "metadata": {
        "description": "The vNet Name from the azuredeploy.json Variables section."
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "The Subnet Name from the azuredeploy.json Variables section."
      }
    },
    "ambariServerNsgName": {
      "type": "string",
      "metadata": {
        "description": "The Network Security Group Name for the Ambari Server from the azuredeploy.json Variables section."
      }
    },
    "ambariServerPubIPName": {
      "type": "string",
      "metadata": {
        "description": "The Name of the Ambari Server's Public IP Address."
      }
    },
    "ambariServerStorageName": {
      "type": "string",
      "metadata": {
        "description": "The Name of the Storage Account for the Ambari Server being deployed."
      }
    },
    "ambariServerName": {
      "type": "string",
      "metadata": {
        "description": "The Ambari Server Name from the azuredeploy.json Variables section."
      }
    },
    "ambariServerOSDiskName": {
      "type": "string",
      "metadata": {
        "description": "The Name of the Ambari Server OS Disk being deployed."
      }
    },
    "ambariServerDataDiskName": {
      "type": "string",
      "metadata": {
        "description": "The Name of the Ambari Server Data Disk being deployed."
      }
    }
  },
  "variables": {
  },
  "resources": [
    {
      "name": "[parameters('ambariServerStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('ambariServerStorageName')]"
      },
      "properties": {
        "accountType": "[parameters('ambariServerStorageType')]"
      }
    },
    {
      "name": "[parameters('ambariServerPubIPName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('ambariServerPubIPName')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('ambariServerPubIPName')]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[parameters('ambariServerNsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-ssh-inbound",
            "properties": {
              "description": "Allow SSH traffic through port 22.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-grafana-inbound",
            "properties": {
              "description": "Allow Grafana traffic through port 3000.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3000",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-zookeeper-inbound",
            "properties": {
              "description": "Allow zookeeper traffic through port 2181.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "2181",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-ambari-web-ui-inbound",
            "properties": {
              "description": "Allow Ambari Server Web UI traffic through port 8080.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-storm-ui-inbound",
            "properties": {
              "description": "Allow Storm UI traffic through port 8744.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8744",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 106,
              "direction": "Inbound"
            }
          },
		   {
            "name": "allow-storm-nimbus-inbound",
            "properties": {
              "description": "Allow Storm nimbus traffic through port 6627.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6627",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 107,
              "direction": "Inbound"
            }
          },
		   {
            "name": "allow-storm-supervisor-inbound",
            "properties": {
              "description": "Allow Storm supervisor traffic through port 6700 and 6701.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6700-6701",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 108,
              "direction": "Inbound"
            }
          },
		   {
            "name": "allow-storm-drpc-inbound",
            "properties": {
              "description": "Allow Storm DRPC traffic through port 3772 and 3773.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3772-3773",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 109,
              "direction": "Inbound"
            }
          },
		   {
            "name": "allow-nifi-inbound",
            "properties": {
              "description": "Allow NiFi traffic through ports 9088, 9090 and 9091.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9088-9091",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
		  {
            "name": "allow-nifi-registry-http-inbound",
            "properties": {
              "description": "Allow NiFi registry HTTP traffic through port 61080.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "61080",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 131,
              "direction": "Inbound"
            }
          },
		   {
            "name": "allow-nifi-registry-https-inbound",
            "properties": {
              "description": "Allow NiFi registry HTTPS traffic through port 61443.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "61443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 132,
              "direction": "Inbound"
            }
          },
		  {
            "name": "allow-schema-registry-inbound",
            "properties": {
              "description": "Allow schema registry traffic through ports 7788 and 7789.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "7788-7789",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound"
            }
          },
		  {
            "name": "allow-streamline-inbound",
            "properties": {
              "description": "Allow streamline traffic through ports 7777 and 7778.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "7777-7778",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 160,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-active-mq-inbound",
            "properties": {
              "description": "Allow ActiveMQ traffic through port 61616.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "61616",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "[concat(parameters('subnetPrefix'))]",
              "access": "Allow",
              "priority": 121,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('vNetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('ambariServerNsgName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('primaryAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('ambariServerNsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('ambariServerName'), '-NIC')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('ambariServerPubIPName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
      ],
      "tags": {
        "displayName": "[concat(parameters('ambariServerName'), '-NIC')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(parameters('ambariServerName'), '-ipconfig')]",
            "properties": {
              "privateIPAddress": "[parameters('ambariServerNicIPAddress')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('ambariServerPubIPName'))]"
              },
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName')), '/subnets/', parameters('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[parameters('ambariServerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "[parameters('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('ambariServerStorageName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('ambariServerName'), '-NIC')]"
      ],
      "tags": {
        "displayName": "[parameters('ambariServerName')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('ambariServerVMSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('ambariServerName')]",
          "adminUsername": "[parameters('ambariServerAdminUsername')]",
          "adminPassword": "[parameters('ambariServerAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('ambariServerImagePublisher')]",
            "offer": "[parameters('ambariServerImageOffer')]",
            "sku": "[parameters('ambariServerImageSku')]",
            "version": "[parameters('ambariServerImageVersion')]"
          },
          "osDisk": {
            "name": "[parameters('ambariServerOSDiskName')]",
            "vhd": {
              "uri": "[concat('http://', parameters('ambariServerStorageName'), '.blob.core.windows.net/vhds', '/', parameters('ambariServerOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://', parameters('ambariServerStorageName'), '.blob.core.windows.net/vhds', '/', parameters('ambariServerDataDiskName'),'.vhd')]"
              },
              "name": "[concat(parameters('ambariServerName'))]",
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "[parameters('ambariServerDataDiskSize')]",
              "lun": 0
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('ambariServerName'), '-NIC'))]",
              "properties": { "primary": true }
            }
          ]
        }
      },
      "resources": [
      ]
    }
  ]
}  